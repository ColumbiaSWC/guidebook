{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Foundations for Research Computing Guidebook Foundations for Research Computing is a program tasked with developing research computing skills and community at Columbia. This book is a guide to the Foundations for Research Computing program for instructors, helpers, student workers, and others involved with the program. What does Foundations do? Foundations for Research Computing has a number of programs and initiatives, including: Two-day Intro to Research Computing Bootcamps based on the Software Carpentry model Intermediate Intensives, one-day training events for students familiar with research computing basics Workshops, two-hour or 90-minute training sessions often organized in series on sequential weeks A Distinguished Lecture series featuring practitioners from industry A Curriculum Innovation Fellows grant program, where grad students and postdocs work with Foundations to create curriculum modules for new training events A Python User Group, community-facing events that combine a more informal group workshop or discussion with time for individual work and socializing","title":"Home"},{"location":"#foundations-for-research-computing-guidebook","text":"Foundations for Research Computing is a program tasked with developing research computing skills and community at Columbia. This book is a guide to the Foundations for Research Computing program for instructors, helpers, student workers, and others involved with the program.","title":"Foundations for Research Computing Guidebook"},{"location":"#what-does-foundations-do","text":"Foundations for Research Computing has a number of programs and initiatives, including: Two-day Intro to Research Computing Bootcamps based on the Software Carpentry model Intermediate Intensives, one-day training events for students familiar with research computing basics Workshops, two-hour or 90-minute training sessions often organized in series on sequential weeks A Distinguished Lecture series featuring practitioners from industry A Curriculum Innovation Fellows grant program, where grad students and postdocs work with Foundations to create curriculum modules for new training events A Python User Group, community-facing events that combine a more informal group workshop or discussion with time for individual work and socializing","title":"What does Foundations do?"},{"location":"curriculum-notes/","text":"Curriculum Notes Michael's Notes on Teaching R I heavily use the beta Data Carpentry R for Social Scientists curriculum. I think that does a great job because it teaches the basics of R in a way that's very practical. You focus on familiarity to R, basic commands, importing and using data, and then you get exposed to the modern paradigms of Tidyverse, dplyr, and ggplot2 that really make R useful to people. While it's obviously VERY fast I think these are the big points you need to hit and it's what I covered in my Textmining Workshop R Crashcourse. I think where I differ from some people is that I like to teach people about R Markdown files and codechunks because I think they're better for learning - because you get an interactive notebook and it's easy for users to make notes and see the code in action. It's a little longer and can cause some headaches but I think that it's a more useful product to the learner, both in that they have a clear notebook and that they now know how to use R Markdown files, which are the real bread and butter of using R. The other thing that I think is really essential is doing everything as live coding. While this is a standard Software Carpentry practice, it's very tempting to have prewritten code or slides but for R I think it's best to make them write it out. Making the code available can be helpful if people are struggling but I don't want people to just sit and run the code because that's not how you learn. So to me the important steps are as follows: Why R? R uses powerful command line tools (like Unix) R is free and open source R is a statistical language rather than a full programming language R is great for creating very sharp and customizable graphics (and many other things) Setup Familiarize yourself with RStudio's interface Understand Projects in R (this is where I show them that Git is very useful and simple from the RStudio IDE) Learn about R Markdown Files & Code Chunks Basics of R Math Objects and Variables Vectors - what they are, kinds of them e.g. numeric, string, factor Common commands to understand data (length(), typeof(), str()) Subsetting Vectors (including dealing with missing data) Data Frames What is a data frame (collection of vectors, each column is a vector of the same type and each row is an observation) Subsetting data frames Modern R Tools Tidyverse - concept of tidy data e.g. tibbles and why they're important for standardizing your data across different tools dplyr and manipulating data (select, filter, mutate, group_by, agrrange, count) ggplot2 - understanding basic R graphing and why ggplot2 offers a more useful infrastructure for modular, customizable data Tying it in with Unix and Git, I like to show that you can launch R from the command line and that you can run R scripts from the command line if there's time, but this is tricky because it depends on how they're using the command line. Alan Croswell's notes on the Software Carpentry curriculum Unix Shell man pages missing from git-bash on windows. Fix: \"google man ls\" macos ls \\--help doesn't work (it's too BSDish to have the > --help switch) sort -n lengths.txt gives the same result without -n > because wc's output is left-padded and spaces collate > differently on MacOS vs. Linux. See > #810 . > LANG=C vs. LANG=en_US.UTF8. A better example would use > left-aligned numbers. Tab completion doesn't appear to work in git bash on Windows Python Use of jupyter lab vs. notebook -- doesn't really matter but > since the syllabus uses Lab, we should too. Someone asked about web scraping, which isn't covered in this > lesson. There's is a LC lesson on web scraping with Python and > the use of Xpath, which may be a good more advanced workshop > to run during the semester. There was one case I noticed in the Beta Python lesson that the > exercises referenced datasets that were not included in the > setup data, which made it non-useful. Non-US Keyboard French Mac has no \\~ (googled: use option-N but that doesn't > work on US keyboard). In SWC slack the answer was these keys > are on option-numbers. Certainly not the case on my US > keyboard.... Added this int\\'l keyboard info to the > workshops > wiki . international students don't always know the names for single > vs. double quotes, tilde, etc. Git git lesson setup page doesn't say to create a github.com > account; only in the git download instructions. Might be > better to say it here as well. We didn't get to collaboration via github PR's, merges, etc. due > to poor time management. We need to stick to the syllabus and > limit the digressions. Note from Patrick: kind of feel like it's fine to not get to everything. Better they understand what you cover, in my opinion. Windows users get a GUI GitHub login prompt when trying to do a > git push to a remote, rather than being prompted on the > terminal One student confused the ! in the GitHub welcome email as part > of their username, which caused git bash to freak out with a > broken pipe error when they tried to push to Github. Worth > noting in case anyone else has this issue. LaTeX Out of the entire class, only one student uses LaTeX to write > her papers and was lamenting how her colleagues waste a lot of > time trying to center figures in Word, etc. Should we offer > a LaTeX workshop? Does somebody already? Did you know you > can export a Jupyter notebook as LaTex? And, of course, > matplotlib and R can export figures in any number of vector formats (svg, eps, etc.) that render nicely with TeX. She uses https://www.overleaf.com but apps like TeXShop are pretty nice and fit the \"run it all on your laptop\" model.","title":"Curriculum Notes"},{"location":"curriculum-notes/#curriculum-notes","text":"","title":"Curriculum Notes"},{"location":"curriculum-notes/#michaels-notes-on-teaching-r","text":"I heavily use the beta Data Carpentry R for Social Scientists curriculum. I think that does a great job because it teaches the basics of R in a way that's very practical. You focus on familiarity to R, basic commands, importing and using data, and then you get exposed to the modern paradigms of Tidyverse, dplyr, and ggplot2 that really make R useful to people. While it's obviously VERY fast I think these are the big points you need to hit and it's what I covered in my Textmining Workshop R Crashcourse. I think where I differ from some people is that I like to teach people about R Markdown files and codechunks because I think they're better for learning - because you get an interactive notebook and it's easy for users to make notes and see the code in action. It's a little longer and can cause some headaches but I think that it's a more useful product to the learner, both in that they have a clear notebook and that they now know how to use R Markdown files, which are the real bread and butter of using R. The other thing that I think is really essential is doing everything as live coding. While this is a standard Software Carpentry practice, it's very tempting to have prewritten code or slides but for R I think it's best to make them write it out. Making the code available can be helpful if people are struggling but I don't want people to just sit and run the code because that's not how you learn. So to me the important steps are as follows:","title":"Michael's Notes on Teaching R"},{"location":"curriculum-notes/#why-r","text":"R uses powerful command line tools (like Unix) R is free and open source R is a statistical language rather than a full programming language R is great for creating very sharp and customizable graphics (and many other things)","title":"Why R?"},{"location":"curriculum-notes/#setup","text":"Familiarize yourself with RStudio's interface Understand Projects in R (this is where I show them that Git is very useful and simple from the RStudio IDE) Learn about R Markdown Files & Code Chunks Basics of R Math Objects and Variables Vectors - what they are, kinds of them e.g. numeric, string, factor Common commands to understand data (length(), typeof(), str()) Subsetting Vectors (including dealing with missing data)","title":"Setup"},{"location":"curriculum-notes/#data-frames","text":"What is a data frame (collection of vectors, each column is a vector of the same type and each row is an observation) Subsetting data frames","title":"Data Frames"},{"location":"curriculum-notes/#modern-r-tools","text":"Tidyverse - concept of tidy data e.g. tibbles and why they're important for standardizing your data across different tools dplyr and manipulating data (select, filter, mutate, group_by, agrrange, count) ggplot2 - understanding basic R graphing and why ggplot2 offers a more useful infrastructure for modular, customizable data Tying it in with Unix and Git, I like to show that you can launch R from the command line and that you can run R scripts from the command line if there's time, but this is tricky because it depends on how they're using the command line.","title":"Modern R Tools"},{"location":"curriculum-notes/#alan-croswells-notes-on-the-software-carpentry-curriculum","text":"","title":"Alan Croswell's notes on the Software Carpentry curriculum"},{"location":"curriculum-notes/#unix-shell","text":"man pages missing from git-bash on windows. Fix: \"google man ls\" macos ls \\--help doesn't work (it's too BSDish to have the > --help switch) sort -n lengths.txt gives the same result without -n > because wc's output is left-padded and spaces collate > differently on MacOS vs. Linux. See > #810 . > LANG=C vs. LANG=en_US.UTF8. A better example would use > left-aligned numbers. Tab completion doesn't appear to work in git bash on Windows Python Use of jupyter lab vs. notebook -- doesn't really matter but > since the syllabus uses Lab, we should too. Someone asked about web scraping, which isn't covered in this > lesson. There's is a LC lesson on web scraping with Python and > the use of Xpath, which may be a good more advanced workshop > to run during the semester. There was one case I noticed in the Beta Python lesson that the > exercises referenced datasets that were not included in the > setup data, which made it non-useful.","title":"Unix Shell"},{"location":"curriculum-notes/#non-us-keyboard","text":"French Mac has no \\~ (googled: use option-N but that doesn't > work on US keyboard). In SWC slack the answer was these keys > are on option-numbers. Certainly not the case on my US > keyboard.... Added this int\\'l keyboard info to the > workshops > wiki . international students don't always know the names for single > vs. double quotes, tilde, etc.","title":"Non-US Keyboard"},{"location":"curriculum-notes/#git","text":"git lesson setup page doesn't say to create a github.com > account; only in the git download instructions. Might be > better to say it here as well. We didn't get to collaboration via github PR's, merges, etc. due > to poor time management. We need to stick to the syllabus and > limit the digressions. Note from Patrick: kind of feel like it's fine to not get to everything. Better they understand what you cover, in my opinion. Windows users get a GUI GitHub login prompt when trying to do a > git push to a remote, rather than being prompted on the > terminal One student confused the ! in the GitHub welcome email as part > of their username, which caused git bash to freak out with a > broken pipe error when they tried to push to Github. Worth > noting in case anyone else has this issue.","title":"Git"},{"location":"curriculum-notes/#latex","text":"Out of the entire class, only one student uses LaTeX to write > her papers and was lamenting how her colleagues waste a lot of > time trying to center figures in Word, etc. Should we offer > a LaTeX workshop? Does somebody already? Did you know you > can export a Jupyter notebook as LaTex? And, of course, > matplotlib and R can export figures in any number of vector formats (svg, eps, etc.) that render nicely with TeX. She uses https://www.overleaf.com but apps like TeXShop are pretty nice and fit the \"run it all on your laptop\" model.","title":"LaTeX"},{"location":"getting-involved/","text":"Getting Involved (More to come) Become an instructor Teach a workshop Present at Python User Group Become a student worker Apply for a Curriculum INnovation Grant","title":"Get Involved"},{"location":"getting-involved/#getting-involved","text":"(More to come) Become an instructor Teach a workshop Present at Python User Group Become a student worker Apply for a Curriculum INnovation Grant","title":"Getting Involved"},{"location":"helpers/","text":"Information for Helpers What is a helper? At Foundations for Research Computing workshops, intensives, and bootcamps, a helper or helpers will circulate in the room to resolve technical issues and answer questions from students. The helper has a critical role in making sure training events go smoothly, as the instructor will typically have limited time and attention for individual students while teaching. What do I need to be a helper? Being a helper We'll be starting at 9:00 at Butler Library, the large white building at the center of the south end of the Morningside campus. We'll have a table set up just inside the entrance. Please introduce yourself to me as a helper so that I'll know you're present and I will provide directions to your room. Lunch will be provided, and we have a vegetarian/vegan option. The day will end at 4:30. You can find directions to Butler here: https://library.columbia.edu/locations/butler/directions.html The only preparation we ask helpers for is to familiarize yourself with the lessons. You do not need to be deeply familiar or expert in these areas, and really a willingness to jump in and help students is the most important element. Please check at the end of this email whether you have been assigned to Python or R\u2014you need not prepare both. Here are links to the lessons: The Unix Shell Version Control with Git Plotting and Programming in Python Programming with R You may also find this page of frequently encountered problems to be a useful reference: Software Carpentry instructors use a \"flag\" system to allow students to request help or show that they have completed a task. Students are given red and green sticky notes, and putting a red sticky on the computer shows that a student requires help. Green sticky notes show when students are finished with a task. So on Thursday and Friday, keep an eye out for those red stickies! Please let me know if you have questions about the lessons, logistics, or anything else. I am copying the lead instructors for each session in case they have anything to add or wish to reach out. Thanks again, and looking forward to seeing you all in action on Thursday!","title":"Helpers"},{"location":"helpers/#information-for-helpers","text":"","title":"Information for Helpers"},{"location":"helpers/#what-is-a-helper","text":"At Foundations for Research Computing workshops, intensives, and bootcamps, a helper or helpers will circulate in the room to resolve technical issues and answer questions from students. The helper has a critical role in making sure training events go smoothly, as the instructor will typically have limited time and attention for individual students while teaching.","title":"What is a helper?"},{"location":"helpers/#what-do-i-need-to-be-a-helper","text":"Being a helper We'll be starting at 9:00 at Butler Library, the large white building at the center of the south end of the Morningside campus. We'll have a table set up just inside the entrance. Please introduce yourself to me as a helper so that I'll know you're present and I will provide directions to your room. Lunch will be provided, and we have a vegetarian/vegan option. The day will end at 4:30. You can find directions to Butler here: https://library.columbia.edu/locations/butler/directions.html The only preparation we ask helpers for is to familiarize yourself with the lessons. You do not need to be deeply familiar or expert in these areas, and really a willingness to jump in and help students is the most important element. Please check at the end of this email whether you have been assigned to Python or R\u2014you need not prepare both. Here are links to the lessons: The Unix Shell Version Control with Git Plotting and Programming in Python Programming with R You may also find this page of frequently encountered problems to be a useful reference: Software Carpentry instructors use a \"flag\" system to allow students to request help or show that they have completed a task. Students are given red and green sticky notes, and putting a red sticky on the computer shows that a student requires help. Green sticky notes show when students are finished with a task. So on Thursday and Friday, keep an eye out for those red stickies! Please let me know if you have questions about the lessons, logistics, or anything else. I am copying the lead instructors for each session in case they have anything to add or wish to reach out. Thanks again, and looking forward to seeing you all in action on Thursday!","title":"What do I need to be a helper?"},{"location":"instructor-intro/","text":"Instructor Overview Welcome to Foundations Community!","title":"Instructor Overview"},{"location":"instructor-intro/#instructor-overview","text":"","title":"Instructor Overview"},{"location":"instructor-intro/#welcome-to-foundations-community","text":"","title":"Welcome to Foundations Community!"},{"location":"instructors/","text":"Instructors Running a Successful Technical Workshop There are many ways to lead a successful technical workshop, but following certain practices can make your teaching go more smoothly. I'm listing some of the most important items from our experience with Foundations below, but you can also find others on the Carpentries Handbook: Tips for Instructors page. Prepare for your workshop by making the curriculum your own. Often, developing a set of notes, a slide deck, or your own version of the curriculum will force you to become deeply familiar with the material and can be useful resources for other instructors. You should run all the code in the lesson you'll present on your own laptop during your preparation\u2014you'll often discover issues you didn't know about. It's a lot easier to fix a small problem on your machine before the workshop than it is under pressure while at the front of the room. Include significant time in your lesson (15-30% of the overall lesson time is recommended) for students to work independently on exercises or challenges. A balance of listening time and independent time helps students solidify their understanding, and often students will need a few minutes to catch up with the lesson or to ask a helper with a problem that's been holding them back. During independent time, you can move around the room and get a sense of whether the lesson is moving too fast or slow and whether there are certain pain points that you should address while speaking\u2014identifying these issues is almost impossible from the front of the room. Use live coding as your primary vehicle for teaching. While written materials or a slide deck can be useful supplements, our feedback shows that people consistently get more out of workshops that use live coding extensively. Live coding can be stressful initially, but students take away much more when they can see exactly what they should be doing at the front of the room.. One thing to avoid is to give a notebook or code to your students and have them step through it\u2014students tend not to feel that this is hands-on instruction. It's fine to provide a notebook or code to students in case they fall behind or so they can reference it after the workshop, but expect students to write and run their own code during the lesson. Give a lot of context. When starting the lesson, make sure to introduce yourself, you might even want to say a few words about your background. As you start the lesson, give context on the tool\u2014what is it, and how is it used in research? It's important that students buy in to a tool right from the beginning, and for tools such as Git that have uses that are less immediately obvious to students, this can be critical. If possible, arrange students in tables or some other collaborative group arrangement. Encourage them to help one another with issues that come up, and that they shouldn't be afraid to ask one another for help or to ask if another student could use assistance. You might consider having the students practice asking a question of their neighbor or asking their neighbor if they need help to model the practice and break the ice. End on time, not earlier or later. We do tend to receive negative feedback when the ending time for sessions is longer or shorter than indicated on the schedule. You're free to edit the schedule\u2014it's your workshop\u2014but if at all possible stick to the time listed. If you're running through the material fast, that likely means you should include some independent working time throughout your lesson. Don't include the working time at the end, as students will generally depart if they know there isn't more instruction coming. If you're running behind, pick another logical stopping point earlier than you planned and end there rather than rushing through the last material or going long. Don't forget those breaks. Breaking on time builds trust with your students and, frankly, it's more humane. It's hard to listen and learn for long stretches, and breaks are an important part of respecting how hard it can be to learn this material. Make sure to take the break yourself\u2014as the instructor, you might not want to spend the whole break helping students if it means you'll have less energy during the rest of the lesson. Keep up the energy. Especially in the last session of the last day, students can be dragging a bit. It helps a great deal if you come in strong and keep up the energy throughout the lesson. Drink that extra coffee if you have to, but put on a smile, speak loudly (or use a microphone if one is available), and engage students with your presence. Standing up and moving around can help with this\u2014you don't need to be standing the whole time, but it's frequently better if you can.","title":"Instructors"},{"location":"instructors/#instructors","text":"","title":"Instructors"},{"location":"instructors/#running-a-successful-technical-workshop","text":"There are many ways to lead a successful technical workshop, but following certain practices can make your teaching go more smoothly. I'm listing some of the most important items from our experience with Foundations below, but you can also find others on the Carpentries Handbook: Tips for Instructors page. Prepare for your workshop by making the curriculum your own. Often, developing a set of notes, a slide deck, or your own version of the curriculum will force you to become deeply familiar with the material and can be useful resources for other instructors. You should run all the code in the lesson you'll present on your own laptop during your preparation\u2014you'll often discover issues you didn't know about. It's a lot easier to fix a small problem on your machine before the workshop than it is under pressure while at the front of the room. Include significant time in your lesson (15-30% of the overall lesson time is recommended) for students to work independently on exercises or challenges. A balance of listening time and independent time helps students solidify their understanding, and often students will need a few minutes to catch up with the lesson or to ask a helper with a problem that's been holding them back. During independent time, you can move around the room and get a sense of whether the lesson is moving too fast or slow and whether there are certain pain points that you should address while speaking\u2014identifying these issues is almost impossible from the front of the room. Use live coding as your primary vehicle for teaching. While written materials or a slide deck can be useful supplements, our feedback shows that people consistently get more out of workshops that use live coding extensively. Live coding can be stressful initially, but students take away much more when they can see exactly what they should be doing at the front of the room.. One thing to avoid is to give a notebook or code to your students and have them step through it\u2014students tend not to feel that this is hands-on instruction. It's fine to provide a notebook or code to students in case they fall behind or so they can reference it after the workshop, but expect students to write and run their own code during the lesson. Give a lot of context. When starting the lesson, make sure to introduce yourself, you might even want to say a few words about your background. As you start the lesson, give context on the tool\u2014what is it, and how is it used in research? It's important that students buy in to a tool right from the beginning, and for tools such as Git that have uses that are less immediately obvious to students, this can be critical. If possible, arrange students in tables or some other collaborative group arrangement. Encourage them to help one another with issues that come up, and that they shouldn't be afraid to ask one another for help or to ask if another student could use assistance. You might consider having the students practice asking a question of their neighbor or asking their neighbor if they need help to model the practice and break the ice. End on time, not earlier or later. We do tend to receive negative feedback when the ending time for sessions is longer or shorter than indicated on the schedule. You're free to edit the schedule\u2014it's your workshop\u2014but if at all possible stick to the time listed. If you're running through the material fast, that likely means you should include some independent working time throughout your lesson. Don't include the working time at the end, as students will generally depart if they know there isn't more instruction coming. If you're running behind, pick another logical stopping point earlier than you planned and end there rather than rushing through the last material or going long. Don't forget those breaks. Breaking on time builds trust with your students and, frankly, it's more humane. It's hard to listen and learn for long stretches, and breaks are an important part of respecting how hard it can be to learn this material. Make sure to take the break yourself\u2014as the instructor, you might not want to spend the whole break helping students if it means you'll have less energy during the rest of the lesson. Keep up the energy. Especially in the last session of the last day, students can be dragging a bit. It helps a great deal if you come in strong and keep up the energy throughout the lesson. Drink that extra coffee if you have to, but put on a smile, speak loudly (or use a microphone if one is available), and engage students with your presence. Standing up and moving around can help with this\u2014you don't need to be standing the whole time, but it's frequently better if you can.","title":"Running a Successful Technical Workshop"},{"location":"resources/","text":"Resources http://swcarpentry.github.io/r-novice-inflammation/ or http://swcarpentry.github.io/r-novice-gapminder/ https://datacarpentry.org/r-socialsci/ \\<\\<--- this one, per Kitty? Socrative quiz for Shell (customized for section 1; please copy and edit as you see fit) Slides for Python (Section 1): https://slides.com/marii/cul-swc-python","title":"Resources"},{"location":"resources/#resources","text":"http://swcarpentry.github.io/r-novice-inflammation/ or http://swcarpentry.github.io/r-novice-gapminder/ https://datacarpentry.org/r-socialsci/ \\<\\<--- this one, per Kitty? Socrative quiz for Shell (customized for section 1; please copy and edit as you see fit) Slides for Python (Section 1): https://slides.com/marii/cul-swc-python","title":"Resources"},{"location":"tips/","text":"Tips For Instructors (From The Carpentries Handbook: Tips for Instructors This page has an assortment of practical tips for instructors. Handling Software Installation Installing software on laptops has gotten a lot better over the years, but it can still be a huge challenge at the start of a workshop. Here are some suggestions for making the process go as smoothly as possible. Software installation can be frustrating, but in the end, it almost always gets done. Be positive, and when it finally works, you can feel proud. What you can do in advance: Plan for installation help at the start of both workshop days. Put it on the schedule and make sure it's clear that people can and should show up during that time. Email the participants a week in advance and the day before to remind them to install the needed software before the workshops. If possible, recruit helpers who use Linux, Mac, and Windows operating systems. If you/helpers/instructors have time, test the install instructions on a fresh user account on your computer. If you anticipate issues (or want to be extra prepared), have some of the emergency options listed below ready to go. If you're teaching for an organisation where participants are bringing work laptops where they don't have administrative access (common in government organisations) -- ask about it. Try to plan ahead either with their central IT organisation or with the \"emergency exits\" listed below. Will you have decent Wi-Fi? A bunch of people installing software at once can kill a poor internet connection. If this is the case, prep a few flash drives with the relevant installers. On the day of: Refer to our Wiki page with common problems If someone has come in early and the software still can't be installed by the time the workshop starts, try one of the \"emergency exits\" below or keep working with them one-on-one until they're able to start. If someone comes in late or is having such trouble with installation that they can't start, have them watch (and maybe work with a neighbour) until the first coffee break, when you can keep working on installation issues. \"Emergency Exits\" If there's absolutely no way that you'll be able to install the software locally on someone's computer, consider using the following: The \"cloud\" variants of RStudio or Jupyter . Microsoft Azure gives you a cloud based Jupyter notebook with many languages and platforms installed. It also includes a shell terminal with git. If your institution's library does laptop rentals, rent 1-2 laptops and set them up with the software before the workshop and keep them on hand as loaners during the workshop. Talking About the Code of Conduct The Carpentries Code of Conduct is a key tool for fostering and upholding an inclusive, respectful learning environment. But for people who are new to the idea of a Code of Conduct, it can be a little awkward to talk about. Here's a sample of how you might introduce the Code of Conduct -- please don't use this verbatim, but adapt it to your own audience and style of introduction: The Carpentries is a community-led project. We value the involvement of everyone in the community. We are committed to creating a friendly and respectful place for learning, teaching and contributing. All participants in our events and communications are expected to show respect and courtesy to others. What kinds of behaviours are expected? All interactions should be professional regardless of platform: either online or in-person. In order to foster a positive and professional learning environment we encourage the following kinds of behaviours in all Carpentries events and platforms: Use welcoming and inclusive language Be respectful of different viewpoints and experiences Gracefully accept constructive criticism Focus on what is best for the community Show courtesy and respect towards other community members Examples of unacceptable behaviour by participants at any Carpentries event/platform can be found in the Code of Conduct . We Instructors take the Code of Conduct very seriously, and we have a process for dealing with violations and complaints. Read the Reporting Guidelines section for the details on how to handle Code of Conduct violations. Using Exercises When teaching a lesson, it's a very good idea to go through the lesson in advance and choose which exercises you want participants to try. Once you've selected exercises, there are several ways to actually display them to the participants during the workshop. Any of these options may be the best choice depending on the tool you're using or the kind of exercises you want to use. From the lesson website (zoomed in) This is the least effort, but requires having the right lesson page open + finding the right exercise Make slides More effort, but easy to flip forward to the next one Have a document of some kind with all the exercises in it More effort, but exercises are all in one place. Put exercises in the Etherpad If you do this in advance, pretty low-effort. Can also use this with any of the other strategies so people can find the exercise in two places. Online tool, like Socrative Requires time to set up, but is great for multiple choice and T/F questions and promotes participation In all of these examples, you'll have to switch from the tool you're using for live coding to however you're showing the exercises. For something like R or Python, one way to reduce the amount of switching is to put all the exercises in an R script / Python notebook and have that open alongside your main working script/notebook so that it's relatively easy to switch back and forth. General Tips Introductions The introduction is one of the most important pieces of the workshop! It sets the tone for the day. See the instructor training material for some suggestions of how to build a good workshop introduction. Accessibility Check-In Before you start, review our accessibility checklist. . Set up your computer and go to the back of the room. Is your font big enough? If your room has a mic, use it, and have a helper stand in the back of the room as you start to confirm that you can be heard. Varying Skill Level Carpentries workshops frequently include many people with widely varying skills and experiences. See the end of The Carpentries Instructor Training on Carpentries teaching practices for some strategies to deal with a diverse classroom. Preparing to Teach It can be daunting to look at a Carpentries lesson and figure out just exactly how you're going to teach it. Here are some suggestions for tackling a new lesson that you've never taught before: Read through the Instructor Guide for the Lesson Most Carpentries lessons include a guide for instructors. These are great for novices preparing to teach a lesson for the first time. As an example, see the instructor notes for the Software Carpentry Unix Shell lesson. Find instructor notes for other lessons through the Extras menu on each lesson's home page. Pick Exercises Most of the lessons have more exercises than you will want to use. Go through the lesson and pick the ones that you think will be most helpful for your audience. If you anticipate mostly novices, look for easier or more scaffolded exercises. For a more advanced audience, a more general exercise might be better. If you'll have both, have an option for each! You won't want to use all the exercises, but make sure that in this process, you commit to actually doing exercises. Exercises are time-consuming and it can be tempting (in the moment) to talk instead of taking the time to do an exercise. However, doing exercises is a huge part of the hands-on Carpentries model and also gives people a chance to chat with their neighbours, so it should be prioritised. Speaking of priorities... Prioritise All of The Carpentries lessons have more material than you can easily cover in the time allotted, especially with a novice group. The Data Carpentry materials are closer to realistic workshop time estimates, but can still run slowly depending on the group. So no matter what, go through the lesson in advance and decide what is most important to cover and what you would feel okay skipping (either skipping outright, or dropping it if you don't have time). As an example: the shell lesson has 7 sections -- the first three are about basic file system navigation and file operations and the last four are about ways to use simple shell tools in more powerful ways. Often a workshop will cover the first three and then three out of the last four. Practice At the very least, do a dry run of all the commands you will be running / code you'll be writing so that you know they work on your computer. Hook your computer up to a projector and figure out how you're going to manage your screen real estate, especially if everything is magnified. RStudio: RStudio can be particularly challenging because of all the panes. Reducing the size of the two right panes is usually needed to have enough space in the script/console panes. Jupyter notebooks: you can toggle the headers/toolbar off so that you have more scripting space If you have the time, doing a full run-through where you actually practice what you're going to say can be extremely valuable. Words are hard when you're also trying to type and manage a classroom, so having said them once in practice gives you one less new thing to think about. Join a community discussion Joining a community discussion before your workshop is a great way to ask/resolve your questions about your coming workshop and also learn from the experience of other instructors!","title":"Tips for Instructors"},{"location":"tips/#tips-for-instructors","text":"(From The Carpentries Handbook: Tips for Instructors This page has an assortment of practical tips for instructors.","title":"Tips For Instructors"},{"location":"tips/#handling-software-installation","text":"Installing software on laptops has gotten a lot better over the years, but it can still be a huge challenge at the start of a workshop. Here are some suggestions for making the process go as smoothly as possible. Software installation can be frustrating, but in the end, it almost always gets done. Be positive, and when it finally works, you can feel proud. What you can do in advance: Plan for installation help at the start of both workshop days. Put it on the schedule and make sure it's clear that people can and should show up during that time. Email the participants a week in advance and the day before to remind them to install the needed software before the workshops. If possible, recruit helpers who use Linux, Mac, and Windows operating systems. If you/helpers/instructors have time, test the install instructions on a fresh user account on your computer. If you anticipate issues (or want to be extra prepared), have some of the emergency options listed below ready to go. If you're teaching for an organisation where participants are bringing work laptops where they don't have administrative access (common in government organisations) -- ask about it. Try to plan ahead either with their central IT organisation or with the \"emergency exits\" listed below. Will you have decent Wi-Fi? A bunch of people installing software at once can kill a poor internet connection. If this is the case, prep a few flash drives with the relevant installers. On the day of: Refer to our Wiki page with common problems If someone has come in early and the software still can't be installed by the time the workshop starts, try one of the \"emergency exits\" below or keep working with them one-on-one until they're able to start. If someone comes in late or is having such trouble with installation that they can't start, have them watch (and maybe work with a neighbour) until the first coffee break, when you can keep working on installation issues. \"Emergency Exits\" If there's absolutely no way that you'll be able to install the software locally on someone's computer, consider using the following: The \"cloud\" variants of RStudio or Jupyter . Microsoft Azure gives you a cloud based Jupyter notebook with many languages and platforms installed. It also includes a shell terminal with git. If your institution's library does laptop rentals, rent 1-2 laptops and set them up with the software before the workshop and keep them on hand as loaners during the workshop.","title":"Handling Software Installation"},{"location":"tips/#talking-about-the-code-of-conduct","text":"The Carpentries Code of Conduct is a key tool for fostering and upholding an inclusive, respectful learning environment. But for people who are new to the idea of a Code of Conduct, it can be a little awkward to talk about. Here's a sample of how you might introduce the Code of Conduct -- please don't use this verbatim, but adapt it to your own audience and style of introduction: The Carpentries is a community-led project. We value the involvement of everyone in the community. We are committed to creating a friendly and respectful place for learning, teaching and contributing. All participants in our events and communications are expected to show respect and courtesy to others. What kinds of behaviours are expected? All interactions should be professional regardless of platform: either online or in-person. In order to foster a positive and professional learning environment we encourage the following kinds of behaviours in all Carpentries events and platforms: Use welcoming and inclusive language Be respectful of different viewpoints and experiences Gracefully accept constructive criticism Focus on what is best for the community Show courtesy and respect towards other community members Examples of unacceptable behaviour by participants at any Carpentries event/platform can be found in the Code of Conduct . We Instructors take the Code of Conduct very seriously, and we have a process for dealing with violations and complaints. Read the Reporting Guidelines section for the details on how to handle Code of Conduct violations.","title":"Talking About the Code of Conduct"},{"location":"tips/#using-exercises","text":"When teaching a lesson, it's a very good idea to go through the lesson in advance and choose which exercises you want participants to try. Once you've selected exercises, there are several ways to actually display them to the participants during the workshop. Any of these options may be the best choice depending on the tool you're using or the kind of exercises you want to use. From the lesson website (zoomed in) This is the least effort, but requires having the right lesson page open + finding the right exercise Make slides More effort, but easy to flip forward to the next one Have a document of some kind with all the exercises in it More effort, but exercises are all in one place. Put exercises in the Etherpad If you do this in advance, pretty low-effort. Can also use this with any of the other strategies so people can find the exercise in two places. Online tool, like Socrative Requires time to set up, but is great for multiple choice and T/F questions and promotes participation In all of these examples, you'll have to switch from the tool you're using for live coding to however you're showing the exercises. For something like R or Python, one way to reduce the amount of switching is to put all the exercises in an R script / Python notebook and have that open alongside your main working script/notebook so that it's relatively easy to switch back and forth.","title":"Using Exercises"},{"location":"tips/#general-tips","text":"Introductions The introduction is one of the most important pieces of the workshop! It sets the tone for the day. See the instructor training material for some suggestions of how to build a good workshop introduction. Accessibility Check-In Before you start, review our accessibility checklist. . Set up your computer and go to the back of the room. Is your font big enough? If your room has a mic, use it, and have a helper stand in the back of the room as you start to confirm that you can be heard. Varying Skill Level Carpentries workshops frequently include many people with widely varying skills and experiences. See the end of The Carpentries Instructor Training on Carpentries teaching practices for some strategies to deal with a diverse classroom.","title":"General Tips"},{"location":"tips/#preparing-to-teach","text":"It can be daunting to look at a Carpentries lesson and figure out just exactly how you're going to teach it. Here are some suggestions for tackling a new lesson that you've never taught before: Read through the Instructor Guide for the Lesson Most Carpentries lessons include a guide for instructors. These are great for novices preparing to teach a lesson for the first time. As an example, see the instructor notes for the Software Carpentry Unix Shell lesson. Find instructor notes for other lessons through the Extras menu on each lesson's home page. Pick Exercises Most of the lessons have more exercises than you will want to use. Go through the lesson and pick the ones that you think will be most helpful for your audience. If you anticipate mostly novices, look for easier or more scaffolded exercises. For a more advanced audience, a more general exercise might be better. If you'll have both, have an option for each! You won't want to use all the exercises, but make sure that in this process, you commit to actually doing exercises. Exercises are time-consuming and it can be tempting (in the moment) to talk instead of taking the time to do an exercise. However, doing exercises is a huge part of the hands-on Carpentries model and also gives people a chance to chat with their neighbours, so it should be prioritised. Speaking of priorities... Prioritise All of The Carpentries lessons have more material than you can easily cover in the time allotted, especially with a novice group. The Data Carpentry materials are closer to realistic workshop time estimates, but can still run slowly depending on the group. So no matter what, go through the lesson in advance and decide what is most important to cover and what you would feel okay skipping (either skipping outright, or dropping it if you don't have time). As an example: the shell lesson has 7 sections -- the first three are about basic file system navigation and file operations and the last four are about ways to use simple shell tools in more powerful ways. Often a workshop will cover the first three and then three out of the last four. Practice At the very least, do a dry run of all the commands you will be running / code you'll be writing so that you know they work on your computer. Hook your computer up to a projector and figure out how you're going to manage your screen real estate, especially if everything is magnified. RStudio: RStudio can be particularly challenging because of all the panes. Reducing the size of the two right panes is usually needed to have enough space in the script/console panes. Jupyter notebooks: you can toggle the headers/toolbar off so that you have more scripting space If you have the time, doing a full run-through where you actually practice what you're going to say can be extremely valuable. Words are hard when you're also trying to type and manage a classroom, so having said them once in practice gives you one less new thing to think about. Join a community discussion Joining a community discussion before your workshop is a great way to ask/resolve your questions about your coming workshop and also learn from the experience of other instructors!","title":"Preparing to Teach"}]}